import socket
import hashlib
import itertools
import pickle
import struct

MASTER_IP = '192.168.29.207'  # Change this to the master's IP
MASTER_PORT = 5000

def recv_msg(sock):
    raw_msglen = recvall(sock, 4)
    if not raw_msglen:
        return None
    msglen = struct.unpack('>I', raw_msglen)[0]
    return recvall(sock, msglen)

def recvall(sock, n):
    data = b''
    while len(data) < n:
        packet = sock.recv(n - len(data))
        if not packet:
            return None
        data += packet
    return data

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((MASTER_IP, MASTER_PORT))
    print("[✓] Connected to Master.")

    while True:
        data = recv_msg(s)
        if not data:
            print("[x] No data received.")
            break

        try:
            target_hash, charset, max_length, chunk = pickle.loads(data)
        except Exception as e:
            print(f"[!] Error unpickling: {e}")
            break

        print(f"[✓] Cracking with chunk: '{chunk}', Max length: {max_length}")

        for length in range(1, max_length + 1):
            for attempt in itertools.product(chunk, repeat=length):
                password = ''.join(attempt)
                if hashlib.md5(password.encode()).hexdigest() == target_hash:
                    print(f"[✓] Password found: {password}")
                    s.sendall(password.encode())
                    return

    print("[x] Task finished or password not found.")
    s.close()

if name == "main":
    main()
