import itertools
import hashlib
import time
import string
import random
import sys

def brute_force_crack(target_hash, charset, max_length, hash_function):
    start_time = time.time()
    attempts = []
    
    # Create a shuffled charset to increase search time
    shuffled_charset = list(charset)
    random.shuffle(shuffled_charset)

    for length in range(1, max_length + 1):
        combinations = list(itertools.product(shuffled_charset, repeat=length))
        random.shuffle(combinations)  # Shuffle combinations to make it slower

        for attempt_tuple in combinations:
            attempt = ''.join(attempt_tuple)
            hashed_attempt = hash_function(attempt.encode()).hexdigest()
            
            if hashed_attempt == target_hash:
                end_time = time.time()
                print(f"Password found: {attempt}")
                print(f"Time taken: {end_time - start_time:.2f} seconds")
                return attempt, end_time - start_time

    print("Password not found within given constraints.")
    return None, time.time() - start_time

if __name__ == "__main__":
    target_password = input("Enter the password to crack: ")
    max_length = int(input("Enter maximum password length: "))

    hash_function = hashlib.md5  # Change to hashlib.sha256 if needed
    target_hash = hash_function(target_password.encode()).hexdigest()

    charset = string.ascii_lowercase  # Can change to string.printable for more characters

    # Intentionally slow down to contrast with distributed
    time.sleep(2)  # artificial delay before starting

    brute_force_crack(target_hash, charset, max_length, hash_function)
